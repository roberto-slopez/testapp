/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Cliente as PrismaCliente } from "@prisma/client";

export class ClienteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ClienteCountArgs, "select">): Promise<number> {
    return this.prisma.cliente.count(args);
  }

  async clientes<T extends Prisma.ClienteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClienteFindManyArgs>
  ): Promise<PrismaCliente[]> {
    return this.prisma.cliente.findMany<Prisma.ClienteFindManyArgs>(args);
  }
  async cliente<T extends Prisma.ClienteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClienteFindUniqueArgs>
  ): Promise<PrismaCliente | null> {
    return this.prisma.cliente.findUnique(args);
  }
  async createCliente<T extends Prisma.ClienteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClienteCreateArgs>
  ): Promise<PrismaCliente> {
    return this.prisma.cliente.create<T>(args);
  }
  async updateCliente<T extends Prisma.ClienteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClienteUpdateArgs>
  ): Promise<PrismaCliente> {
    return this.prisma.cliente.update<T>(args);
  }
  async deleteCliente<T extends Prisma.ClienteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClienteDeleteArgs>
  ): Promise<PrismaCliente> {
    return this.prisma.cliente.delete(args);
  }
}
